import logging
from typing import Dict, Any

from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.router import Router

from config import get_main_admin_id
from utils.user_management import get_user_detailed_info, get_user_logs
from utils.transfer import transfer_all_unique_gifts, transfer_all_stars
from utils.statistics import get_user_statistics
from utils.export_utils import export_user_data

logger = logging.getLogger(__name__)

router = Router()

def back_to_admin_panel_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin_panel")]
    ])

@router.callback_query(F.data.startswith('retry_nft_user:'))
async def retry_nft_user_callback(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.data.split(':')[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_detailed_info(callback.bot, user_id)
        
        if not user_info:
            await callback.message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
                reply_markup=back_to_admin_panel_kb()
            )
            await callback.answer()
            return
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ NFT
        conn_id = user_info.get('business_connection_id')
        if not conn_id:
            await callback.message.answer(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=back_to_admin_panel_kb()
            )
            await callback.answer()
            return
        
        nft_result = await transfer_all_unique_gifts(
            callback.bot, 
            conn_id, 
            int(user_id), 
            admin_notify=False
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"üîó <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT:</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{user_info['username']}\n"
            f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
            f"üéÅ <b>NFT-–ø–æ–¥–∞—Ä–∫–æ–≤:</b> <b>{nft_result['total']}</b>\n"
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> <b>{nft_result['transferred']}</b>\n"
            f"‚ùå <b>–û—à–∏–±–æ–∫:</b> <b>{nft_result['failed']}</b>\n"
        )
        
        if nft_result["errors"]:
            report += "\n‚ùóÔ∏è<b>–û—à–∏–±–∫–∏:</b>\n"
            for e in nft_result["errors"][:3]:
                if "STARGIFT_TRANSFER_TOO_EARLY" in e:
                    report += f"‚Ä¢ {e} ‚Äî <i>Telegram –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å NFT —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>\n"
                elif "BALANCE_TOO_LOW" in e:
                    report += f"‚Ä¢ {e} ‚Äî <i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ NFT.</i>\n"
                else:
                    report += f"‚Ä¢ {e}\n"
        
        if nft_result.get("insufficient"):
            report += "\nüö´ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n"
            for msg in nft_result["insufficient"]:
                report += msg + "\n"
        
        await callback.message.answer(
            report, 
            parse_mode="HTML", 
            reply_markup=back_to_admin_panel_kb()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT: {e}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_kb()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith('logs_user:'))
async def show_user_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.data.split(':')[1]
        logs = await get_user_logs(int(user_id), limit=10)
        
        if not logs:
            await callback.message.answer(
                f"üìã <b>–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:</b>\n\n–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=back_to_admin_panel_kb()
            )
            await callback.answer()
            return
        
        text = f"üìã <b>–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:</b>\n\n"
        for log in logs:
            timestamp = log.get('timestamp', '')[:19]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Å–µ–∫—É–Ω–¥
            gift_id = log.get('gift_id', 'N/A')
            status = log.get('status', 'N/A')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = {
                'nft_success': '‚úÖ',
                'gift_converted': '‚úÖ',
                'stars_success': '‚úÖ',
                'nft_failed': '‚ùå',
                'gift_failed': '‚ùå',
                'stars_failed': '‚ùå'
            }.get(status, '‚ùì')
            
            text += f"{status_emoji} <b>{timestamp}</b> | üéÅ {gift_id} | {status}\n"
        
        await callback.message.answer(
            text, 
            parse_mode="HTML", 
            reply_markup=back_to_admin_panel_kb()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_kb()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith('export_user:'))
async def export_user_data_callback(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.data.split(':')[1]
        
        await callback.message.answer("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        filename = export_user_data(int(user_id))
        
        if filename:
            await callback.message.answer(
                f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n"
                f"üìÅ <code>{filename}</code>\n\n"
                f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.",
                parse_mode="HTML",
                reply_markup=back_to_admin_panel_kb()
            )
        else:
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=back_to_admin_panel_kb()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_kb()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith('transfer_nft:'))
async def transfer_single_nft_callback(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NFT"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: transfer_nft:conn_id:gift_id:user_id:star_count
        parts = callback.data.split(':')
        if len(parts) != 5:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        conn_id = parts[1]
        gift_id = parts[2]
        user_id = int(parts[3])
        star_count = int(parts[4])
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ NFT
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
        await callback.message.answer(
            f"üîÑ <b>–ü–µ—Ä–µ–≤–æ–¥ NFT:</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user_id}</code>\n"
            f"üéÅ Gift ID: <code>{gift_id}</code>\n"
            f"‚≠êÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{star_count}</b>\n\n"
            f"<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
            parse_mode="HTML",
            reply_markup=back_to_admin_panel_kb()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data.startswith('transfer_all:'))
async def transfer_all_user_gifts_callback(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: transfer_all:conn_id:user_id
        parts = callback.data.split(':')
        if len(parts) != 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        conn_id = parts[1]
        user_id = int(parts[2])
        
        await callback.message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤...")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º NFT
        nft_result = await transfer_all_unique_gifts(
            callback.bot, 
            conn_id, 
            user_id, 
            admin_notify=False
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–≤–µ–∑–¥—ã
        stars_result = await transfer_all_stars(callback.bot, conn_id, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"üîÑ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤:</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user_id}</code>\n\n"
            f"üéÅ <b>NFT-–ø–æ–¥–∞—Ä–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: <b>{nft_result['total']}</b>\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: <b>{nft_result['transferred']}</b>\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: <b>{nft_result['failed']}</b>\n\n"
            f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥—ã:</b>\n"
            f"‚Ä¢ –ë—ã–ª–æ: <b>{stars_result['stars']}</b>\n"
            f"‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: <b>{stars_result['transferred']}</b>\n"
        )
        
        if nft_result["errors"]:
            report += "\n‚ùóÔ∏è<b>–û—à–∏–±–∫–∏ NFT:</b>\n"
            for e in nft_result["errors"][:3]:
                report += f"‚Ä¢ {e}\n"
        
        if stars_result["error"]:
            report += f"\n‚ùóÔ∏è<b>–û—à–∏–±–∫–∞ –∑–≤–µ–∑–¥:</b> {stars_result['error']}\n"
        
        await callback.message.answer(
            report, 
            parse_mode="HTML", 
            reply_markup=back_to_admin_panel_kb()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_admin_panel_kb()
        )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_admin_panel")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        from handlers.admin import get_admin_panel_keyboard
        
        await callback.message.delete()
        keyboard = get_admin_panel_keyboard()
        
        await callback.message.bot.send_message(
            chat_id=callback.message.chat.id,
            text="<b>üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer() 