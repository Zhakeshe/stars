import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import is_admin
from states import MailingStates
from utils.file_utils import get_connections
from utils.logging import log_admin_action

router = Router()
logger = logging.getLogger(__name__)

def back_to_admin_panel_kb():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin_panel")]
    ])

@router.callback_query(F.data == "admin_mailing")
async def admin_mailing_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.delete()
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=back_to_admin_panel_kb()
    )
    await state.set_state(MailingStates.waiting_for_text)
    await callback.answer()

@router.message(MailingStates.waiting_for_text)
async def mailing_get_text(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    if message.text and message.text.lower() == "/cancel":
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=back_to_admin_panel_kb())
        return
    
    await state.update_data(mailing_text=message.text)
    await message.answer(
        "üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–Ω–µ—Ç</b> –µ—Å–ª–∏ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
        parse_mode="HTML",
        reply_markup=back_to_admin_panel_kb()
    )
    await state.set_state(MailingStates.waiting_for_photo)

@router.message(MailingStates.waiting_for_photo)
async def mailing_get_photo(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    mailing_text = data.get("mailing_text")
    photo = None
    
    if message.text and message.text.lower() in ["–Ω–µ—Ç", "no"]:
        photo = None
    elif message.photo:
        photo = message.photo[-1].file_id
    else:
        await message.answer("‚ùóÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–Ω–µ—Ç</b>.", parse_mode="HTML")
        return
    
    await state.clear()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    await perform_mailing(message, mailing_text, photo)

async def perform_mailing(message: Message, mailing_text: str, photo: str = None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        connections = get_connections()
        count = 0
        errors = 0
        failed_users = []
        
        await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(connections)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for conn in connections:
            try:
                if photo:
                    await message.bot.send_photo(
                        chat_id=conn["user_id"],
                        photo=photo,
                        caption=mailing_text,
                        parse_mode="HTML"
                    )
                else:
                    await message.bot.send_message(
                        chat_id=conn["user_id"],
                        text=mailing_text,
                        parse_mode="HTML"
                    )
                count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                errors += 1
                failed_users.append(conn["user_id"])
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {conn['user_id']}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£—Å–ø–µ—à–Ω–æ: <b>{count}</b>\n"
            f"–û—à–∏–±–æ–∫: <b>{errors}</b>", 
            parse_mode="HTML", 
            reply_markup=back_to_admin_panel_kb()
        )
        
        if failed_users:
            from config import get_main_admin_id
            await message.bot.send_message(
                chat_id=get_main_admin_id(),
                text=f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º user_id: {', '.join(map(str, failed_users))}",
                parse_mode="HTML"
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
        log_admin_action(
            message.from_user.id, 
            "mailing", 
            f"sent to {count} users, {errors} failed"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}", 
            reply_markup=back_to_admin_panel_kb()
        )

@router.message(F.text == "/mailing")
async def mailing_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=back_to_admin_panel_kb()
    )
    await state.set_state(MailingStates.waiting_for_text) 