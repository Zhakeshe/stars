import asyncio
import logging
from typing import Dict, Any, List
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states import AdminSettingsStates, MailingStates, CheckSystemStates

from config import is_admin
from utils.file_utils import get_connections, load_settings, save_settings, get_setting, set_setting
from utils.transfer import transfer_all_unique_gifts, get_star_balance, get_unique_gifts, get_regular_gifts
from utils.logging import log_admin_action, log_performance
from utils.automation import send_smart_notifications, auto_transfer_nft_when_ready
from utils.statistics import get_statistics, generate_statistics_report
from utils.user_management import get_users_list, get_user_detailed_info
from utils.mass_operations import mass_transfer_nft, transfer_nft_for_user
from utils.check_system import create_check, get_all_checks, get_checks_statistics, delete_check, get_unused_checks, get_check

router = Router()
logger = logging.getLogger(__name__)

async def safe_edit_message(message, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    try:
        current_text = message.text or message.caption or ""
        if current_text == text:
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
            return False
        
        await message.edit_text(text, **kwargs)
        return True
    except Exception as e:
        if "message is not modified" in str(e).lower():
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É
            return False
        else:
            # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            raise e

def get_admin_panel_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    auto_transfer = get_setting('auto_transfer', True)
    manual_selection = get_setting('manual_selection', False)
    auto_notifications = get_setting('auto_notifications', True)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT", callback_data="admin_mass_nft"),
            InlineKeyboardButton(text="‚≠êÔ∏è –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥", callback_data="admin_mass_stars")
        ],
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_mailing"),
            InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üé´ –°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤", callback_data="admin_checks"),
            InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin_logs")
        ]
    ])

@router.message(F.text == "/admin")
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        return
    
    keyboard = get_admin_panel_keyboard()
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å NFT Gift Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        report = await generate_statistics_report()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        edited = await safe_edit_message(
            callback.message,
            report,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        if not edited:
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await safe_edit_message(
            callback.message,
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        users = await get_users_list()
        
        if not users:
            users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
            for i, user in enumerate(users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                username = user.get('username', 'N/A')
                user_id = user.get('user_id', 'N/A')
                connection_date = user.get('connection_date', 'N/A')[:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                
                users_text += f"{i}. @{username} (ID: {user_id})\n"
                users_text += f"   üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {connection_date}\n\n"
            
            if len(users) > 20:
                users_text += f"... –∏ –µ—â—ë {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            keyboard = []
            for i, user in enumerate(users[:10], 1):  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10
                username = user.get('username', f'User{i}')
                user_id = user.get('user_id')
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üë§ {username}",
                        callback_data=f"user_info:{user_id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        edited = await safe_edit_message(
            callback.message,
            users_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        if not edited:
            await callback.answer("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç—É–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await safe_edit_message(
            callback.message,
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.callback_query(F.data.startswith("user_info:"))
async def user_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not is_admin(callback.from_user.id):
        return
    
    user_id = int(callback.data.split(":")[1])
    await callback.answer(f"üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}...")
    
    try:
        user_info = await get_user_detailed_info(callback.bot, user_id)
        
        if not user_info:
            await callback.message.edit_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ])
            )
            return
        
        username = user_info.get('username', 'N/A')
        connection_date = user_info.get('connection_date', 'N/A')[:10]
        star_balance = user_info.get('star_balance', 'N/A')
        nft_count = user_info.get('nft_count', 'N/A')
        total_transfers = user_info.get('total_transfers', 0)
        success_rate = user_info.get('success_rate', 0)
        
        text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üë§ Username: @{username}\n"
            f"üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {connection_date}\n"
            f"‚≠êÔ∏è –ó–≤–µ–∑–¥: {star_balance}\n"
            f"üéÅ NFT: {nft_count}\n"
            f"üîÑ –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {total_transfers}\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
        )
        
        keyboard = [
            [InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data=f"user_logs:{user_id}")],
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å NFT", callback_data=f"retry_nft_user:{user_id}")],
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={user_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ]
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
        )

@router.callback_query(F.data == "admin_mass_nft")
async def admin_mass_nft(callback: CallbackQuery):
    """–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT...")
    
    try:
        result = await mass_transfer_nft(callback.bot)
        
        # result —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
        await callback.message.edit_text(
            result,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )



async def admin_settings_from_message(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    auto_transfer = get_setting('auto_transfer', True)
    manual_selection = get_setting('manual_selection', False)
    auto_notifications = get_setting('auto_notifications', True)
    min_stars = get_setting('min_stars_for_auto_transfer', 10)
    
    text = (
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if auto_transfer else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üëÜ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if manual_selection else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîî –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if auto_notifications else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"‚≠êÔ∏è –ú–∏–Ω. –∑–≤–µ–∑–¥ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {min_stars}\n"
    )
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥",
                callback_data="admin_toggle_auto"
            ),
            InlineKeyboardButton(
                text="üëÜ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä",
                callback_data="admin_toggle_manual"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="admin_toggle_notifications"
            ),
            InlineKeyboardButton(
                text="‚≠êÔ∏è –ú–∏–Ω. –∑–≤–µ–∑–¥",
                callback_data="admin_min_stars"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def admin_back_from_message(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    keyboard = get_admin_panel_keyboard()
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å NFT Gift Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_settings")
async def admin_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    auto_transfer = get_setting('auto_transfer', True)
    manual_selection = get_setting('manual_selection', False)
    auto_notifications = get_setting('auto_notifications', True)
    min_stars = get_setting('min_stars_for_auto_transfer', 10)
    
    text = (
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if auto_transfer else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üëÜ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if manual_selection else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîî –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if auto_notifications else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"‚≠êÔ∏è –ú–∏–Ω. –∑–≤–µ–∑–¥ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {min_stars}\n"
    )
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥",
                callback_data="admin_toggle_auto"
            ),
            InlineKeyboardButton(
                text="üëÜ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä",
                callback_data="admin_toggle_manual"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="admin_toggle_notifications"
            ),
            InlineKeyboardButton(
                text="‚≠êÔ∏è –ú–∏–Ω. –∑–≤–µ–∑–¥",
                callback_data="admin_min_stars"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "admin_toggle_auto")
async def admin_toggle_auto(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    current = get_setting('auto_transfer', True)
    set_setting('auto_transfer', not current)
    save_settings()
    
    await callback.answer(f"–ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ {'–≤–∫–ª—é—á–µ–Ω' if not current else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    await admin_settings(callback)

@router.callback_query(F.data == "admin_toggle_manual")
async def admin_toggle_manual(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    current = get_setting('manual_selection', False)
    set_setting('manual_selection', not current)
    save_settings()
    
    await callback.answer(f"–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä {'–≤–∫–ª—é—á–µ–Ω' if not current else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    await admin_settings(callback)

@router.callback_query(F.data == "admin_toggle_notifications")
async def admin_toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_admin(callback.from_user.id):
        return
    
    current = get_setting('auto_notifications', True)
    set_setting('auto_notifications', not current)
    save_settings()
    
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if not current else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
    await admin_settings(callback)

@router.callback_query(F.data == "admin_min_stars")
async def admin_min_stars(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(callback.from_user.id):
        return
    
    current_min_stars = get_setting('min_stars_for_auto_transfer', 10)
    
    text = (
        "‚≠êÔ∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞</b>\n\n"
        f"üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_min_stars}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton(text="5", callback_data="admin_set_min_stars:5"),
            InlineKeyboardButton(text="10", callback_data="admin_set_min_stars:10"),
            InlineKeyboardButton(text="15", callback_data="admin_set_min_stars:15")
        ],
        [
            InlineKeyboardButton(text="20", callback_data="admin_set_min_stars:20"),
            InlineKeyboardButton(text="25", callback_data="admin_set_min_stars:25"),
            InlineKeyboardButton(text="30", callback_data="admin_set_min_stars:30")
        ],
        [
            InlineKeyboardButton(text="50", callback_data="admin_set_min_stars:50"),
            InlineKeyboardButton(text="100", callback_data="admin_set_min_stars:100")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="admin_manual_min_stars")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ]
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("admin_set_min_stars:"))
async def admin_set_min_stars(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
        new_value = int(callback.data.split(":")[1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        set_setting('min_stars_for_auto_transfer', new_value)
        save_settings()
        
        await callback.answer(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_value}")
        await admin_settings(callback)
        
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "admin_manual_min_stars")
async def admin_manual_min_stars(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(callback.from_user.id):
        return
    
    await state.set_state(AdminSettingsStates.waiting_for_min_stars)
    
    text = (
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000\n"
        "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(AdminSettingsStates.waiting_for_min_stars)
async def handle_manual_min_stars(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        if not message.text.isdigit():
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000\n"
                "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
                parse_mode="HTML"
            )
            return
        
        value = int(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        if value < 1 or value > 1000:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "üìù –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        set_setting('min_stars_for_auto_transfer', value)
        save_settings()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}</b>",
            parse_mode="HTML"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await admin_settings_from_message(message)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n"
            "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            parse_mode="HTML"
        )

@router.message(MailingStates.waiting_for_text)
async def handle_mailing_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.update_data(mailing_text=message.text)
    await state.set_state(MailingStates.waiting_for_photo)
    
    text = (
        "üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n{message.text[:200]}{'...' if len(message.text) > 200 else ''}\n\n"
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚è≠Ô∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="mailing_skip_photo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(MailingStates.waiting_for_photo, F.photo)
async def handle_mailing_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    data = await state.get_data()
    mailing_text = data.get('mailing_text', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo_file_id = message.photo[-1].file_id
    
    text = (
        "üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{mailing_text[:200]}{'...' if len(mailing_text) > 200 else ''}\n\n"
        "üì∑ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ\n\n"
        "üöÄ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚ùå –ò–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mailing_send")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(photo_file_id=photo_file_id)
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(MailingStates.waiting_for_photo, ~F.photo)
async def handle_mailing_photo_invalid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
        "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚è≠Ô∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode="HTML"
    )

@router.message(F.text == "/cancel")
async def cancel_input(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)"""
    if not is_admin(message.from_user.id):
        return
    
    current_state = await state.get_state()
    
    if current_state == AdminSettingsStates.waiting_for_min_stars.state:
        await state.clear()
        await message.answer("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
        await admin_settings_from_message(message)
    elif current_state in [MailingStates.waiting_for_text.state, MailingStates.waiting_for_photo.state]:
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await admin_back_from_message(message)
    elif current_state in [CheckSystemStates.waiting_for_stars_amount.state, CheckSystemStates.waiting_for_check_description.state]:
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ —á–µ–∫–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∏—Å—Ç–µ–º–µ —á–µ–∫–æ–≤", callback_data="admin_checks")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.callback_query(F.data == "admin_mailing")
async def admin_mailing(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    await state.set_state(MailingStates.waiting_for_text)
    
    text = (
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞:\n"
        "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π</b>\n"
        "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <code>–∫–æ–¥</code>\n"
        "‚Ä¢ <a href='—Å—Å—ã–ª–∫–∞'>—Å—Å—ã–ª–∫–∞</a>\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "mailing_skip_photo")
async def mailing_skip_photo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    data = await state.get_data()
    mailing_text = data.get('mailing_text', '')
    
    text = (
        "üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{mailing_text[:200]}{'...' if len(mailing_text) > 200 else ''}\n\n"
        "üì∑ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n"
        "üöÄ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚ùå –ò–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mailing_send")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "mailing_send")
async def mailing_send(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        data = await state.get_data()
        mailing_text = data.get('mailing_text', '')
        photo_file_id = data.get('photo_file_id', None)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from utils.database import db
        users = db.get_all_users()
        
        if not users:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                "üë• –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ])
            )
            await state.clear()
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        success_count = 0
        failed_count = 0
        
        progress_message = await callback.message.edit_text(
            f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
            f"‚ùå –û—à–∏–±–æ–∫: 0",
            parse_mode="HTML"
        )
        
        for i, user in enumerate(users, 1):
            try:
                user_id = user.get('user_id')
                if not user_id:
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if photo_file_id:
                    await callback.bot.send_photo(
                        chat_id=user_id,
                        photo=photo_file_id,
                        caption=mailing_text,
                        parse_mode="HTML"
                    )
                else:
                    await callback.bot.send_message(
                        chat_id=user_id,
                        text=mailing_text,
                        parse_mode="HTML"
                    )
                
                success_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
                if i % 10 == 0:
                    await progress_message.edit_text(
                        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}",
                        parse_mode="HTML"
                    )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await progress_message.edit_text(
            f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{mailing_text[:100]}{'...' if len(mailing_text) > 100 else ''}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        await state.clear()

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        return
    
    keyboard = get_admin_panel_keyboard()
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å NFT Gift Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )



@router.callback_query(F.data == "admin_logs")
async def admin_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏...")
    
    try:
        from utils.database import db
        logs = db.get_recent_logs(10)
        
        if not logs:
            text = "üìã <b>–õ–æ–≥–∏ –ø—É—Å—Ç—ã</b>"
        else:
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n"
            for i, log in enumerate(logs[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                timestamp = log.get('timestamp', '')[:19]
                user_id = log.get('user_id', 'N/A')
                status = log.get('status', 'N/A')
                error = log.get('error', '')
                
                text += f"<b>{i}.</b> üïê {timestamp}\n"
                text += f"üë§ ID: {user_id} | üìä {status}\n"
                if error:
                    text += f"‚ùå {error[:50]}...\n"
                text += "\n"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_logs")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )





@router.callback_query(F.data == "admin_mass_stars")
async def admin_mass_stars(callback: CallbackQuery):
    """–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("‚≠êÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        connections = get_connections()
        total_stars = 0
        successful = 0
        failed = 0
        errors = []
        
        for connection in connections:
            try:
                user_id = connection.get('user_id')
                business_connection_id = connection.get('business_connection_id')
                if user_id and business_connection_id:
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
                    balance = await get_star_balance(callback.bot, business_connection_id)
                    if balance and balance > 0:
                        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–µ–∑–¥
                        total_stars += balance
                        successful += 1
            except Exception as e:
                failed += 1
                user_id = connection.get('user_id', 'Unknown')
                errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {str(e)}")
        
        text = (
            f"‚≠êÔ∏è <b>–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(connections)}\n"
            f"‚≠êÔ∏è –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {total_stars}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        )
        
        if errors:
            text += "\n‚ö†Ô∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>\n"
            for error in errors[:3]:
                text += f"‚Ä¢ {error}\n"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–µ–∑–¥: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–µ–∑–¥: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.message(F.text == "/logs")
async def show_logs(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        from utils.file_utils import get_recent_logs
        logs = get_recent_logs(10)
        
        if not logs:
            await message.answer("üìã –õ–æ–≥–∏ –ø—É—Å—Ç—ã")
            return
        
        log_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n"
        for log in logs:
            timestamp = log.get('timestamp', '')[:19]  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            user_id = log.get('user_id', 'N/A')
            status = log.get('status', 'N/A')
            error = log.get('error', '')
            
            log_text += f"üïê {timestamp}\n"
            log_text += f"üë§ ID: {user_id}\n"
            log_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            if error:
                log_text += f"‚ùå –û—à–∏–±–∫–∞: {error}\n"
            log_text += "\n"
        
        await message.answer(log_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

@router.message(F.text.startswith("/delete_check"))
async def delete_check_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞ –ø–æ ID"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º ID —á–µ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n"
                "üí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n"
                "<code>/delete_check ID_—á–µ–∫–∞</code>\n\n"
                "üìù <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/delete_check d4080cb3-1d1e-4dfd-a782-88549703df2a</code>",
                parse_mode="HTML"
            )
            return
        
        check_id = parts[1].strip()
        check = get_check(check_id)
        
        if not check:
            await message.answer(
                "‚ùå <b>–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                f"ID: <code>{check_id}</code>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —á–µ–∫–∞.",
                parse_mode="HTML"
            )
            return
        
        if check["used"]:
            await message.answer(
                "‚ùå <b>–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫!</b>\n\n"
                f"üé´ <b>ID —á–µ–∫–∞:</b> <code>{check['id']}</code>\n"
                f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥:</b> {check['stars_amount']}\n"
                f"üë§ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª:</b> {check.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìÖ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:</b> {check.get('used_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:19].replace('T', ' ') if check.get('used_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                parse_mode="HTML"
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —á–µ–∫
        if delete_check(check_id):
            text = (
                f"‚úÖ <b>–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üé´ <b>ID —á–µ–∫–∞:</b> <code>{check['id']}</code>\n"
                f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥:</b> {check['stars_amount']}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {check.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check['created_at'][:19].replace('T', ' ')}\n\n"
                f"üóëÔ∏è –ß–µ–∫ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
            log_admin_action(
                message.from_user.id,
                "delete_check_command",
                f"deleted check {check_id} ({check['stars_amount']} stars)"
            )
        else:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞:</b> {str(e)}",
            parse_mode="HTML"
        )

@router.message(F.text == "/help")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    if not is_admin(message.from_user.id):
        return
    
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∞</b>\n\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üé´ <b>–°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤:</b>\n"
        "/delete_check <ID> - —É–¥–∞–ª–∏—Ç—å —á–µ–∫ –ø–æ ID\n"
        "–ü—Ä–∏–º–µ—Ä: /delete_check d4080cb3-1d1e-4dfd-a782-88549703df2a\n\n"
        "üîß <b>–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üîÑ –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT - –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö NFT\n"
        "‚Ä¢ ‚≠êÔ∏è –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥ - –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∑–≤–µ–∑–¥\n"
        "‚Ä¢ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "‚Ä¢ üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "‚Ä¢ üìã –õ–æ–≥–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n"
        "‚Ä¢ üé´ –°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞–º–∏"
    )
    
    await message.answer(help_text, parse_mode="HTML")

# –°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤
@router.callback_query(F.data == "admin_checks")
async def admin_checks(callback: CallbackQuery):
    """–°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        stats = get_checks_statistics()
        
        text = (
            "üé´ <b>–°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤ –Ω–∞ –∑–≤–µ–∑–¥—ã</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: {stats['total_checks']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['used_checks']}\n"
            f"‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['unused_checks']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {stats['total_stars']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['used_stars']}\n"
            f"‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['unused_stars']}\n\n"
            "üí° <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫:</b>\n"
            "1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ: @Storthash_bot —á–µ–∫ 100 –ü–æ–¥–∞—Ä–æ–∫\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π —á–µ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data="admin_create_check")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤", callback_data="admin_list_checks")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–µ–∫", callback_data="admin_delete_check")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï —á–µ–∫–∏", callback_data="admin_delete_all_checks")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫–æ–≤", callback_data="admin_checks_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_checks: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã —á–µ–∫–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.callback_query(F.data == "admin_create_check")
async def admin_create_check_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    await state.set_state(CheckSystemStates.waiting_for_stars_amount)
    
    text = (
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –Ω–∞ –∑–≤–µ–∑–¥—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è —á–µ–∫–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 100, 500, 1000\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_checks")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

@router.message(CheckSystemStates.waiting_for_stars_amount)
async def handle_stars_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        stars_amount = int(message.text.strip())
        
        if stars_amount <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
            return
        
        await state.update_data(stars_amount=stars_amount)
        await state.set_state(CheckSystemStates.waiting_for_check_description)
        
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: <b>{stars_amount}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä: –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel\n"
            "‚è≠Ô∏è –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )

@router.message(CheckSystemStates.waiting_for_check_description)
async def handle_check_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–∫–∞"""
    if not is_admin(message.from_user.id):
        return
    
    if message.text == "/skip":
        description = ""
    else:
        description = message.text.strip()
    
    data = await state.get_data()
    stars_amount = data.get("stars_amount")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫
        check = create_check(stars_amount, description)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —á–µ–∫–∞
        bot_username = (await message.bot.get_me()).username
        check_link = f"https://t.me/{bot_username}?start=check_{check['id']}"
        
        text = (
            "‚úÖ <b>–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üé´ <b>ID —á–µ–∫–∞:</b> <code>{check['id']}</code>\n"
            f"‚≠êÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:</b> {stars_amount}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check['created_at'][:19].replace('T', ' ')}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"<code>{check_link}</code>\n\n"
            "üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –µ—â–µ —á–µ–∫", callback_data="admin_create_check")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤", callback_data="admin_list_checks")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∏—Å—Ç–µ–º–µ —á–µ–∫–æ–≤", callback_data="admin_checks")]
        ])
        
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )

@router.callback_query(F.data == "admin_list_checks")
async def admin_list_checks(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–µ–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        checks = get_all_checks()
        
        if not checks:
            await callback.message.edit_text(
                "üìã <b>–°–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤</b>\n\n"
                "–ß–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
                ]),
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        checks.sort(key=lambda x: x["created_at"], reverse=True)
        
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–µ–∫–æ–≤:</b>\n\n"
        
        for i, check in enumerate(checks[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if check["used"] else "‚è≥ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
            used_info = ""
            
            if check["used"]:
                used_info = f"\nüë§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª: {check.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                if check.get("used_at"):
                    used_info += f"\nüìÖ –î–∞—Ç–∞: {check['used_at'][:19].replace('T', ' ')}"
            
            text += (
                f"{i}. <b>ID:</b> <code>{check['id'][:8]}...</code>\n"
                f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥:</b> {check['stars_amount']}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {check.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check['created_at'][:19].replace('T', ' ')}\n"
                f"üî∏ <b>–°—Ç–∞—Ç—É—Å:</b> {status}{used_info}\n\n"
            )
        
        if len(checks) > 10:
            text += f"... –∏ –µ—â–µ {len(checks) - 10} —á–µ–∫–æ–≤\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_list_checks")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–µ–∫", callback_data="admin_delete_check")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–µ–∫–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–µ–∫–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
            ])
        )

@router.callback_query(F.data == "admin_checks_stats")
async def admin_checks_stats(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        stats = get_checks_statistics()
        
        text = (
            "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫–æ–≤</b>\n\n"
            f"üé´ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: {stats['total_checks']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['used_checks']}\n"
            f"‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['unused_checks']}\n\n"
            f"‚≠êÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–µ–∑–¥:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {stats['total_stars']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['used_stars']}\n"
            f"‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['unused_stars']}\n\n"
            f"üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {(stats['used_checks'] / stats['total_checks'] * 100) if stats['total_checks'] > 0 else 0:.1f}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –Ω–∞ —á–µ–∫: {stats['total_stars'] / stats['total_checks'] if stats['total_checks'] > 0 else 0:.0f}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_checks_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ–∫–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ–∫–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
            ])
        )

@router.callback_query(F.data == "admin_delete_check")
async def admin_delete_check_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        unused_checks = get_unused_checks()
        
        if not unused_checks:
            await callback.message.edit_text(
                "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–∞</b>\n\n"
                "‚ùå –ù–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
                ]),
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        unused_checks.sort(key=lambda x: x["created_at"], reverse=True)
        
        text = "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        
        keyboard = []
        for i, check in enumerate(unused_checks[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            text += (
                f"{i}. <b>ID:</b> <code>{check['id'][:8]}...</code>\n"
                f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥:</b> {check['stars_amount']}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {check.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check['created_at'][:19].replace('T', ' ')}\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {check['id'][:8]}...",
                    callback_data=f"delete_check_confirm:{check['id']}"
                )
            ])
        
        if len(unused_checks) > 10:
            text += f"... –∏ –µ—â–µ {len(unused_checks) - 10} —á–µ–∫–æ–≤\n\n"
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")])
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
            ])
        )

@router.callback_query(F.data.startswith("delete_check_confirm:"))
async def delete_check_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        check_id = callback.data.split(":")[1]
        check = get_check(check_id)
        
        if not check:
            await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        if check["used"]:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫!", show_alert=True)
            return
        
        text = (
            f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞</b>\n\n"
            f"üé´ <b>ID —á–µ–∫–∞:</b> <code>{check['id']}</code>\n"
            f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥:</b> {check['stars_amount']}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {check.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check['created_at'][:19].replace('T', ' ')}\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
            f"–ß–µ–∫ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–µ–∫?"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_check_final:{check_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_check")
            ]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("delete_check_final:"))
async def delete_check_final(callback: CallbackQuery):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        check_id = callback.data.split(":")[1]
        check = get_check(check_id)
        
        if not check:
            await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        if check["used"]:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫!", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º —á–µ–∫
        if delete_check(check_id):
            text = (
                f"‚úÖ <b>–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üé´ <b>ID —á–µ–∫–∞:</b> <code>{check['id']}</code>\n"
                f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥:</b> {check['stars_amount']}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {check.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check['created_at'][:19].replace('T', ' ')}\n\n"
                f"üóëÔ∏è –ß–µ–∫ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
            log_admin_action(
                callback.from_user.id,
                "delete_check",
                f"deleted check {check_id} ({check['stars_amount']} stars)"
            )
        else:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="admin_delete_check")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–∫–∞–º", callback_data="admin_checks")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
            ])
        )

@router.callback_query(F.data == "admin_delete_all_checks")
async def admin_delete_all_checks(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫–æ–≤
        stats = get_checks_statistics()
        
        if stats['total_checks'] == 0:
            await callback.answer("‚ùå –ù–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", show_alert=True)
            return
        
        text = (
            f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –í–°–ï–• —á–µ–∫–æ–≤</b>\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: {stats['total_checks']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['used_checks']}\n"
            f"‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['unused_checks']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {stats['total_stars']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['used_stars']}\n"
            f"‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['unused_stars']}\n\n"
            f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï —á–µ–∫–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–õ–¨–ó–Ø –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —á–µ–∫–∏?"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –í–°–ï", callback_data="delete_all_checks_confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_checks")
            ]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "delete_all_checks_confirm")
async def delete_all_checks_confirm(callback: CallbackQuery):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫–∏
        all_checks = get_all_checks()
        
        if not all_checks:
            await callback.answer("‚ùå –ù–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–µ–∫–∏
        deleted_count = 0
        failed_count = 0
        
        for check in all_checks:
            try:
                if delete_check(check['id']):
                    deleted_count += 1
                else:
                    failed_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞ {check['id']}: {e}")
                failed_count += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
        log_admin_action(
            callback.from_user.id,
            "delete_all_checks",
            f"deleted {deleted_count} checks, failed: {failed_count}"
        )
        
        text = (
            f"‚úÖ <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —á–µ–∫–æ–≤: {deleted_count}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è: {failed_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_checks)}\n\n"
        )
        
        if failed_count > 0:
            text += f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> {failed_count} —á–µ–∫–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.\n"
            text += "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
        
        text += "üóëÔ∏è –í—Å–µ —á–µ–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–∫–∞–º", callback_data="admin_checks")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —á–µ–∫–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_checks")]
            ])
        ) 