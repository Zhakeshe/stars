import logging
import hashlib
import random
import string
from typing import Dict, Any

from aiogram import Bot, F
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.router import Router
from utils.check_system import get_check, create_check
from utils.check_design import get_check_design, get_check_button_text

logger = logging.getLogger(__name__)

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
inline_cache: Dict[str, str] = {}


@router.inline_query()
async def handle_inline_query(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    logger.info(f"=== –ò–ù–õ–ê–ô–ù –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù ===")
    logger.info(f"–ó–∞–ø—Ä–æ—Å: '{inline_query.query}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inline_query.from_user.id}")
    
    try:
        query = inline_query.query.strip()
        if not query:
            logger.info("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            item = InlineQueryResultArticle(
                id="empty_query",
                title="üé´ –°–æ–∑–¥–∞—Ç—å —á–µ–∫ –Ω–∞ –∑–≤–µ–∑–¥—ã",
                description="–ù–∞–ø–∏—à–∏—Ç–µ: —á–µ–∫ 100 –ü–æ–¥–∞—Ä–æ–∫",
                input_message_content=InputTextMessageContent(
                    message_text="üé´ <b>–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –Ω–∞ –∑–≤–µ–∑–¥—ã</b>\n\nüí° <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫:</b>\n–ù–∞–ø–∏—à–∏—Ç–µ: <code>—á–µ–∫ 100 –ü–æ–¥–∞—Ä–æ–∫</code>\n\n‚≠êÔ∏è <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n‚Ä¢ —á–µ–∫ 50 –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n‚Ä¢ —á–µ–∫ 200 –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫\n‚Ä¢ —á–µ–∫ 1000 –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å",
                    parse_mode="HTML"
                )
            )
            await inline_query.bot.answer_inline_query(
                inline_query_id=inline_query.id,
                results=[item],
                cache_time=1
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞
        if query.startswith("—á–µ–∫ ") or query.startswith("check "):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞: {query}")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            parts = query.split()
            logger.info(f"–ß–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞: {parts}")
            if len(parts) >= 2:
                try:
                    stars_amount = int(parts[1])
                    description = " ".join(parts[2:]) if len(parts) > 2 else "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∞"
                    logger.info(f"–°–æ–∑–¥–∞–µ–º —á–µ–∫: {stars_amount} –∑–≤–µ–∑–¥, –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")
                    
                    # –°–æ–∑–¥–∞–µ–º —á–µ–∫
                    check = create_check(stars_amount, description)
                    bot_username = (await inline_query.bot.get_me()).username
                    check_link = f"https://t.me/{bot_username}?start=check_{check['id']}"
                    
                    # –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —á–µ–∫–∞
                    result_id = f"check_{check['id']}"
                    
                    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ–∫–∞
                    sender_name = f"@{inline_query.from_user.username}" if inline_query.from_user.username else inline_query.from_user.first_name
                    check_text = get_check_design(check, sender_name)
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ–∫–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∏–∑–∞–π–Ω–∞–º–∏
                    items = []
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π —á–µ–∫
                    items.append(InlineQueryResultArticle(
                        id=f"check_{check['id']}_1",
                        title=f"üé´ –ß–µ–∫ –Ω–∞ {stars_amount} –∑–≤–µ–∑–¥",
                        description=f"üìù {description} | –û—Ç {sender_name}",
                        input_message_content=InputTextMessageContent(
                            message_text=check_text,
                            parse_mode="HTML"
                        ),
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [InlineKeyboardButton(
                                    text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫",
                                    url=check_link
                                )]
                            ]
                        ),
                        thumbnail_url="https://cdn-icons-png.flaticon.com/512/6366/6366191.png"
                    ))
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—Ä–æ—Å—Ç–æ–π —á–µ–∫
                    simple_text = f"üé´ <b>–ß–µ–∫ –Ω–∞ {stars_amount} –∑–≤–µ–∑–¥</b>\n\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\nüë§ <b>–û—Ç:</b> {sender_name}\n\nüí´ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–≤–µ–∑–¥—ã!</b>"
                    items.append(InlineQueryResultArticle(
                        id=f"check_{check['id']}_2",
                        title=f"‚≠êÔ∏è {stars_amount} –∑–≤–µ–∑–¥ - {description}",
                        description=f"–û—Ç {sender_name}",
                        input_message_content=InputTextMessageContent(
                            message_text=simple_text,
                            parse_mode="HTML"
                        ),
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [InlineKeyboardButton(
                                    text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫",
                                    url=check_link
                                )]
                            ]
                        ),
                        thumbnail_url="https://cdn-icons-png.flaticon.com/512/6366/6366191.png"
                    ))
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ö—Ä–∞—Å–∏–≤—ã–π —á–µ–∫
                    beautiful_text = f"‚ú® <b>–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è –≤–∞—Å!</b> ‚ú®\n\nüé´ <b>–ß–µ–∫ –Ω–∞ {stars_amount} –∑–≤–µ–∑–¥</b>\nüíù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {description}\nüë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {sender_name}\n\nüåü <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ –∑–≤–µ–∑–¥—ã!</b>"
                    items.append(InlineQueryResultArticle(
                        id=f"check_{check['id']}_3",
                        title=f"üíù –ü–æ–¥–∞—Ä–æ–∫: {stars_amount} –∑–≤–µ–∑–¥",
                        description=f"{description} | {sender_name}",
                        input_message_content=InputTextMessageContent(
                            message_text=beautiful_text,
                            parse_mode="HTML"
                        ),
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [InlineKeyboardButton(
                                    text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫",
                                    url=check_link
                                )]
                            ]
                        ),
                        thumbnail_url="https://cdn-icons-png.flaticon.com/512/6366/6366191.png"
                    ))
                    
                    await inline_query.bot.answer_inline_query(
                        inline_query_id=inline_query.id,
                        results=items,
                        cache_time=300  # 5 –º–∏–Ω—É—Ç –∫—ç—à –¥–ª—è —á–µ–∫–æ–≤
                    )
                    
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–ª–∞–π–Ω-—á–µ–∫: {stars_amount} –∑–≤–µ–∑–¥, –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")
                    return
                    
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                    pass

        # –û–±—ã—á–Ω—ã–π –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å: {query}")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_id = hashlib.md5(query.encode()).hexdigest()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–∫–∏
        random_code = ''.join(random.choices(string.digits, k=5))
        bot_username = (await inline_query.bot.get_me()).username
        bot_start_link = f"https://t.me/{bot_username}?start={random_code}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∫—ç—à
        inline_cache[random_code] = query

        # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
        item = InlineQueryResultArticle(
            id=result_id,
            title="üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫",
            description="‚ú® –ë—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥—É —Å –∫–Ω–æ–ø–∫–æ–π!",
            input_message_content=InputTextMessageContent(
                message_text=f"üéÅ –£ –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫!\n\n{query}"
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üéÅ –ü–æ–ª—É—á–∏—Ç—å",
                        url=bot_start_link
                    )]
                ]
            ),
            thumbnail_url="https://cdn-icons-png.flaticon.com/512/6366/6366191.png"
        )

        await inline_query.bot.answer_inline_query(
            inline_query_id=inline_query.id,
            results=[item],
            cache_time=10
        )
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –æ–±—ã—á–Ω—ã–π –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å: {query}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞: {e}")


def get_inline_cache() -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    return inline_cache.copy()


def clear_inline_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    global inline_cache
    inline_cache.clear()
    logger.info("–ö—ç—à –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω")


def get_inline_statistics() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        'cache_size': len(inline_cache),
        'cache_keys': list(inline_cache.keys()),
        'total_queries': len(inline_cache)
    } 