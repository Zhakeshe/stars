import hashlib
import random
import string
import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto

from config import is_admin, WELCOME_MESSAGE, VERIFICATION_TEXT, VERIFICATION_KEYBOARD, CHANNEL_LINK, REVIEWS_LINK
from utils.check_system import get_check, use_check
from utils.check_design import get_check_design, get_check_button_text
from utils.logging import log_admin_action

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
inline_cache = {}

@router.message(F.text.startswith("/start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"=== –û–ë–†–ê–ë–û–¢–ß–ò–ö /start –í–´–ó–í–ê–ù ===")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message.text)}")
    logger.info(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message.text)}")
    
    if is_admin(message.from_user.id):
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        from handlers.admin import admin_panel
        await admin_panel(message)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ (–¥–ª—è —á–µ–∫–æ–≤)
        command_parts = message.text.split()
        check_id = None
        
        logger.info(f"–†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã: {command_parts}")
        
        if len(command_parts) > 1 and command_parts[1].startswith("check_"):
            check_id = command_parts[1].replace("check_", "")
            logger.info(f"–ù–∞–π–¥–µ–Ω ID —á–µ–∫–∞: {check_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞
            check = get_check(check_id)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —á–µ–∫–∞: {check}")
            
            if check and not check["used"]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —á–µ–∫–µ
                logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —á–µ–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                await show_check_message(message, check)
                return
            elif check and check["used"]:
                # –ß–µ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                logger.info(f"–ß–µ–∫ {check_id} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
                await message.answer(
                    "‚ùå <b>–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!</b>\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞.",
                    parse_mode="HTML"
                )
                return
            else:
                # –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
                logger.warning(f"–ß–µ–∫ {check_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await message.answer(
                    "‚ùå <b>–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
        
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await show_welcome_message(message)



async def show_check_message(message: Message, check: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —á–µ–∫–µ"""
    try:
        photo = FSInputFile("stars.jpg")
        check_text = get_check_design(check)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_check_button_text(), callback_data=f"redeem_check_{check['id']}")],
            [
                InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                InlineKeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)
            ]
        ])
        
        await message.answer_photo(
            photo=photo,
            caption=check_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        check_text = get_check_design(check)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_check_button_text(), callback_data=f"redeem_check_{check['id']}")],
            [
                InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                InlineKeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)
            ]
        ])
        
        await message.answer(check_text, reply_markup=keyboard, parse_mode="HTML")

async def show_welcome_message(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        photo = FSInputFile("stars.jpg")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                InlineKeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)
            ]
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞
        welcome_text = f"{WELCOME_MESSAGE}\n\n‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥</b>\n\nüí° <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫:</b>\n‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º\n‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        
        await message.answer_photo(
            photo=photo,
            caption=welcome_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                InlineKeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)
            ]
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞
        welcome_text = f"{WELCOME_MESSAGE}\n\n‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥</b>\n\nüí° <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫:</b>\n‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º\n‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "receive_gift")
async def handle_receive(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å'"""
    try:
        photo = FSInputFile("image.jpg")
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=photo,
	        caption=VERIFICATION_TEXT,
                parse_mode="MarkdownV2"
            ),
	    reply_markup=VERIFICATION_KEYBOARD
            
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_receive: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "check_connection")
async def handle_check(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        await callback.message.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        await callback.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_check: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "back_to_gift")
async def handle_back_to_gift(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            photo = FSInputFile("stars.jpg")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                    InlineKeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)
                ]
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞
            welcome_text = f"{WELCOME_MESSAGE}\n\n‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥</b>\n\nüí° <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫:</b>\n‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º\n‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            
            await callback.message.answer_photo(
                photo=photo,
                caption=welcome_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                    InlineKeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", url=REVIEWS_LINK)
                ]
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞
            welcome_text = f"{WELCOME_MESSAGE}\n\n‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥</b>\n\nüí° <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫:</b>\n‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º\n‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            
            await callback.message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_gift: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("redeem_check_"))
async def handle_redeem_check(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üéÅ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫'"""
    try:
        check_id = callback.data.replace("redeem_check_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–µ–∫
        check = get_check(check_id)
        if not check:
            await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        if check["used"]:
            await callback.answer("‚ùå –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!", show_alert=True)
            return
        
        # –ü–æ–º–µ—á–∞–µ–º —á–µ–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        username = callback.from_user.username or callback.from_user.first_name
        if use_check(check_id, callback.from_user.id, username):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
            try:
                photo = FSInputFile("stars.jpg")
                await callback.message.edit_media(
                    media=InputMediaPhoto(
                        media=photo,
                        caption=VERIFICATION_TEXT
                    ),
                    reply_markup=VERIFICATION_KEYBOARD,
                    parse_mode="MarkdownV2"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ–∫–∞
                from config import get_main_admin_id
                await callback.bot.send_message(
                    get_main_admin_id(),
                    f"üé´ <b>–ß–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                    f"üÜî ID: <code>{callback.from_user.id}</code>\n"
                    f"‚≠êÔ∏è –ó–≤–µ–∑–¥: <b>{check['stars_amount']}</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {check.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üé´ ID —á–µ–∫–∞: <code>{check_id}</code>",
                    parse_mode="HTML"
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    VERIFICATION_TEXT,
                    reply_markup=VERIFICATION_KEYBOARD,
                    parse_mode="MarkdownV2"
                )
            
            await callback.answer()
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞!", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_redeem_check: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)



@router.message(F.text == "/inline")
async def inline_test_command(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞"""
    bot_info = await message.bot.get_me()
    
    await message.answer(
        f"ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {bot_info.first_name}\n"
        f"üîó <b>Username:</b> @{bot_info.username}\n"
        f"üÜî <b>ID:</b> {bot_info.id}\n\n"
        f"üí° <b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:</b>\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ: @{bot_info.username} —á–µ–∫ 100 –ü–æ–¥–∞—Ä–æ–∫\n\n"
        f"üîß <b>–ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º:</b> ‚úÖ –í–∫–ª—é—á–µ–Ω\n\n"
        f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        f"1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ: @{bot_info.username} —á–µ–∫ 100 –ü–æ–¥–∞—Ä–æ–∫\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π —á–µ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
        f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É!",
        parse_mode="HTML"
    )

@router.message(F.text == "/help")
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if is_admin(message.from_user.id):
        # –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∞
        help_text = """<b>üõ†Ô∏è –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /admin ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ /users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /user_info <ID/@username> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ /mass_transfer ‚Äî –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT
‚Ä¢ /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ /logs ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
‚Ä¢ /retry_nft ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ NFT

<b>–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ ‚ö°Ô∏è –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

<i>–í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!</i>"""
    else:
        # –ü–æ–º–æ—â—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = """<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å</b>

‚Ä¢ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å NFT-–ø–æ–¥–∞—Ä–∫–∏.
‚Ä¢ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –ø–æ–¥–∫–ª—é—á–∏ –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–±–æ—Ç–∞ –≤ Telegram.
‚Ä¢ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º (@–∏–º—è_–±–æ—Ç–∞ –≤ —á–∞—Ç–µ).
‚Ä¢ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

<i>–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!</i>"""
    
    await message.answer(help_text, parse_mode="HTML") 