#!/usr/bin/env python3
import asyncio
import logging
from datetime import datetime
from flask import Flask
from threading import Thread

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ò–º–ø–æ—Ä—Ç—ã —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π
from config import TOKEN, validate_config
from handlers.business import router as business_router
from handlers.admin import router as admin_router
from handlers.user import router as user_router
from handlers.mailing import router as mailing_router
from handlers.inline import router as inline_router
from handlers.callbacks import router as callbacks_router

from utils.file_utils import load_settings, save_settings, migrate_from_json_files
from utils.automation import start_automation_tasks
from utils.logging import setup_logging


# ---------- Flask –±”©–ª—ñ–º—ñ ----------
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ NFT Gift Bot is running!", 200

def run_flask():
    # Flask-—Ç—ñ –±”©–ª–µ–∫ –ø–æ—Ç–æ–∫—Ç–∞ “õ–æ—Å–∞–º—ã–∑
    app.run(host="0.0.0.0", port=5000)


# ---------- Aiogram –±”©–ª—ñ–º—ñ ----------
def setup_bot() -> tuple[Bot, Dispatcher]:
    bot = Bot(
        token=TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()

    # –†–æ—É—Ç–µ—Ä–ª–µ—Ä–¥—ñ “õ–æ—Å—É
    dp.include_router(business_router)
    dp.include_router(admin_router)
    dp.include_router(user_router)
    dp.include_router(mailing_router)
    dp.include_router(inline_router)
    dp.include_router(callbacks_router)

    return bot, dp


async def startup(bot: Bot):
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ NFT Gift Bot...")

    try:
        migrate_from_json_files()
        logging.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    load_settings()

    try:
        from config import get_main_admin_id
        await bot.send_message(
            get_main_admin_id(),
            "ü§ñ <b>NFT Gift Bot –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")


async def shutdown(bot: Bot):
    logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ NFT Gift Bot...")
    save_settings()
    try:
        from config import get_main_admin_id
        await bot.send_message(
            get_main_admin_id(),
            "üõë <b>NFT Gift Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


async def main():
    if not validate_config():
        logging.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    setup_logging()
    bot, dp = setup_bot()

    dp.startup.register(startup)
    dp.shutdown.register(shutdown)

    try:
        automation_task = asyncio.create_task(start_automation_tasks(bot))
        logging.info("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        automation_task.cancel()
        try:
            await automation_task
        except asyncio.CancelledError:
            pass
        await bot.session.close()
        logging.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # Flask —Å–µ—Ä–≤–µ—Ä—ñ–Ω –±”©–ª–µ–∫ –ø–æ—Ç–æ–∫—Ç–∞ “õ–æ—Å—É
    Thread(target=run_flask, daemon=True).start()

    # Aiogram –±–æ—Ç—ã“£–¥—ã —Ç–µ–∫ –±—ñ—Ä —Ä–µ—Ç “õ–æ—Å—É
    asyncio.run(main())
